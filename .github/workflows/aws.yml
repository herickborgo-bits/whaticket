name: Deploy to Amazon ECS

on:
  push:
    branches:
      - "WHAT-79"

env:
  AWS_REGION: us-east-1
  # ECS_SERVICE: test-whatsapp-portal-api
  # ECS_CLUSTER: kankei-wpp-cluster-prod
  # ECS_TASK_DEFINITION: .aws/task-definition.json
  # CONTAINER_NAME: test-whatsapp-portal-api-container

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: self-hosted
    environment: test
    strategy:
      fail-fast: false
      matrix:
        include:
          - context: ./backend
            dockerfile: ./backend/Dockerfile
            repository: test-whatsapp-portal-api
          - context: ./frontend
            dockerfile: ./frontend/Dockerfile
            repository: test-whatsapp-portal-front
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Create Amazon ECR Repository if not existing
      env:
        ECR_REPOSITORY: ${{ matrix.repository }}
        # HAS_REPOSITORY: $(aws ecr describe-repositories --region $AWS_REGION | grep $ECR_REPOSITORY)
      run: |
        - aws ecr describe-repositories --region $AWS_REGION | grep $ECR_REPOSITORY
      #  - [[ -z $HAS_REPOSITORY ]] && aws ecr create-repository --region $AWS_REGION --repository-name $ECR_REPOSITORY

    - name: Build and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ matrix.repository }}
        IMAGE_TAG: ${{ github.ref_name }}-${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ${{ matrix.dockerfile}} ${{ matrix.context }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
  # deploy:
  #   name: Deploy
  #   runs-on: self-hosted
  #   environment: test


  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v1
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: ${{ env.AWS_REGION }}

  #   - name: Login to Amazon ECR
  #     id: login-ecr
  #     uses: aws-actions/amazon-ecr-login@v1

  #   - name: Build and push image to Amazon ECR
  #     id: build-image
  #     env:
  #       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #       IMAGE_TAG: ${{ github.sha }}
  #     run: |
  #       docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
  #       docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  #       echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
  #   - name: Make environment variable
  #     id: make-env
  #     run: |
  #       echo "environments=$(cat )"

  #   - name: Fill in the new image ID in the Amazon ECS task definition
  #     id: task-def
  #     uses: aws-actions/amazon-ecs-render-task-definition@v1
  #     with:
  #       task-definition: ${{ env.ECS_TASK_DEFINITION }}
  #       container-name: ${{ env.CONTAINER_NAME }}
  #       image: ${{ steps.build-image.outputs.image }}
  #       environment-variables: ${{ steps.make-env.outputs.environments }}


  #   - name: Deploy Amazon ECS task definition
  #     uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #     with:
  #       task-definition: ${{ steps.task-def.outputs.task-definition }}
  #       service: ${{ env.ECS_SERVICE }}
  #       cluster: ${{ env.ECS_CLUSTER }}
  #       wait-for-service-stability: true